
package org.example;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.io.*;
import java.util.HashMap;

class Parser;

parser code{:
    IdLexer idLexer;
    public static void main(String[] arg) throws Exception{
        String archivo = "est.txt";
        File f = new File(archivo);
        InputStream inputStream = new FileInputStream(f);
        IdLexer lexer = new org.example.IdLexer(new InputStreamReader(inputStream));

        Parser p = new Parser();
        p.idLexer = lexer;
        p.setScanner(p.idLexer);
        p.parse();
    }

    private Integer maxLiterals;
    private Integer maxClauses;
    private Integer totalClauses = 0;

    private boolean ok = true;

    public void syntax_error(Symbol cur_token){
//        report_error("Error de sintaxis: linea "+idLexer.linea()+
//        ", columna "+idLexer.columna() + "\n", null);
        report_error("Error de sintaxis: linea "+ (((IdLexer) this.getScanner()).linea() + 1) +
        ", columna "+ (((IdLexer) this.getScanner()).columna() + 1) + "\n", null);
    }
:}

terminal String PARAMETER, CNF;
terminal EOL, NEGATION;
terminal Integer NUMBER;

non terminal program, clauses, clause, header, literals, literal, variable;

precedence left NEGATION;
start with program;

program ::= {: ; :}
            | header clauses {: ; :}
            ;

clauses ::= clause {: ; :}
            | clauses clause {: ; :};

header ::= PARAMETER CNF NUMBER:e1 NUMBER:e2 {: maxLiterals=e1;
                                                maxClauses=e2;:};

clause ::= literals:ls EOL {:   totalClauses++;
                                if(totalClauses > maxClauses){
                                    System.out.println("Error: maximum number of clauses exceeded!");
                                }else{
                                    System.out.println(ls);
                                }
                                 :}
            | error EOL
            ;

literals ::= literal:l {: RESULT=l; :}
             | literals:ls literal:l {: RESULT=ls + " v " + l; :};

literal ::= variable:e {: RESULT="p"+e ; :}
            | NEGATION variable:e {: RESULT="Â¬p"+e; :};

variable ::= NUMBER:e1 {: if (e1 > maxLiterals){
                            System.out.println("Error: " + '"' + e1 + '"' + " variable no definida");
                          }else{
                            RESULT=e1;
                          }
                          ; :};
