package org.example;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.io.*;

class Parser;
parser code {:
    IdLexer idLexer;
    public static void main(String[] arg) throws Exception{
        String archivo = "src/main/java/org/example/prueba.txt";
        File f = new File(archivo);
        InputStream inputStream = new FileInputStream(f);
        IdLexer lexer = new org.example.IdLexer(new InputStreamReader(inputStream));

        Parser p = new Parser();
        p.idLexer = lexer;
        p.setScanner(p.idLexer);
        p.parse();
    }
    List<Integer> regs = new ArrayList<Integer>(Collections.nCopies(26, 0));

    int nline;
    public void syntax_error(Symbol cur_token){
        report_error("Error de sintaxis: linea "+ (((IdLexer) this.getScanner()).linea()) +
        ", columna "+ (((IdLexer) this.getScanner()).columna()) + "\n", null);
    }
    String sentence = "";
:}

terminal String VAR;
terminal String NOT;
terminal String OR, AND;
terminal DIMPL; // double implication
terminal IMPL; // implication
terminal String LPAREN, RPAREN;
terminal NEWLINE;

non terminal prog;
non terminal sentencia;
non terminal String expr;

precedence left IMPL, DIMPL;
precedence left OR;
precedence left AND;
precedence left NOT;

start with prog;

prog ::=        {:;:}
        |   prog sentencia {:;:}
        ;

sentencia ::= NEWLINE {:;:}
        |   expr:e NEWLINE    {: System.out.println(e); :}
        |   error NEWLINE     {:;:}
        ;

expr ::=  LPAREN expr:e RPAREN      {: RESULT="("+e+")"; :}
        |   NOT expr:e              {: RESULT="!("+e+")"; :}
        |   expr:e1 OR expr:e2      {: RESULT=e1 + " || " + e2; :}
        |   expr:e1 AND expr:e2     {: RESULT=e1 + " && " + e2; :}
        |   expr:e1 IMPL expr:e2    {: RESULT="!" + e1 + " || " + e2; :}
        |   expr:e1 DIMPL expr:e2   {: RESULT="(" + "!(" + e1 + ") || " + e2 + ") && (" + "!(" + e2 + ") || " + e1 + ")" ; :}
        |   VAR:var                 {: RESULT=var; :}
        ;
