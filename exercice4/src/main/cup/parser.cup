package org.example;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.io.*;

class Parser;
parser code {:
    IdLexer idLexer;
    public static void main(String[] arg) throws Exception{
        String archivo = "src/main/java/org/example/test.txt";
        File f = new File(archivo);
        InputStream inputStream = new FileInputStream(f);
        IdLexer lexer = new org.example.IdLexer(new InputStreamReader(inputStream));

        Parser p = new Parser();
        p.idLexer = lexer;
        p.setScanner(p.idLexer);
        p.parse();
    }
     public void syntax_error(Symbol cur_token){
        report_error("Error de sintaxis: linea "+ (((IdLexer) this.getScanner()).linea() + 1) +
        ", columna "+ (((IdLexer) this.getScanner()).columna() + 1) + "\n", null);
     }
:}

terminal String FORALL, EXISTS;
terminal String VAR, CONST, PREDICATE, FUNCTION, SEPARATOR;
terminal String NOT;
terminal String OR, AND;
terminal String DIMPL; // double implication
terminal String IMPL; // implication
terminal String LPAREN, RPAREN;
terminal String NEWLINE;

non terminal String prog;
non terminal String sentencia;
non terminal String pred, func;
non terminal String expr, llista_expr;
non terminal String term, term_list;

precedence left IMPL, DIMPL;
precedence left OR;
precedence left AND;
precedence left FORALL, EXISTS;
precedence left NOT;

start with prog;

prog ::=        {:;:}
        |   prog sentencia {:;:}
        ;

sentencia ::= NEWLINE {:;:}
        |   llista_expr:e NEWLINE    {: System.out.println("Line " + idLexer.linea() + " is correct: " + e); :}
        |   error:e NEWLINE          {: ; :}
        ;

llista_expr ::= expr:e                  {: RESULT=e; :}
            |   expr:e llista_expr:le   {: RESULT=e + le; :}
            ;

expr ::=    EXISTS:e VAR:v              {: RESULT=e + " " + v + " "; :}
        |   FORALL:f VAR:v              {: RESULT=f + " " + v + " "; :}
        |   LPAREN:l expr:e RPAREN:r    {: RESULT=l + e + r; :}
        |   NOT:n expr:e              {: RESULT=n + e; :}
        |   expr:e1 OR:o expr:e2      {: RESULT=e1 + " " + o + " " + e2; :}
        |   expr:e1 AND:a expr:e2     {: RESULT=e1 + " " + a + " " + e2; :}
        |   expr:e1 IMPL:i expr:e2    {: RESULT=e1 + " " + i + " " + e2; :}
        |   expr:e1 DIMPL:di expr:e2   {: RESULT=e1 + " " + di + " " + e2; :}
        |   pred:p                    {: RESULT=p; :}
        |   term:t               {: RESULT=t; :}
        ;

pred ::=    PREDICATE:p LPAREN:l term_list:tl RPAREN:r   {: RESULT=p + l + tl + r; :}
        ;

func ::=    FUNCTION:f LPAREN:l term_list:tl RPAREN:r   {: RESULT=f + l + tl + r; :}
        ;

term_list ::=   term:t SEPARATOR:s term_list:tl    {: RESULT=t + s + " " + tl; :}
            |   term:t                        {: RESULT=t; :}
            ;

term ::=    func:f        {: RESULT=f;:}
        |   VAR:v        {:RESULT=v;:}
        |   CONST:c       {:RESULT=c;:}
        ;
