package org.example;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.io.*;
import java.util.HashMap;

class Parser;
parser code {:
    IdLexer idLexer;
    public static void main(String[] arg) throws Exception{
        String archivo = "src/main/java/org/example/test.txt";
        File f = new File(archivo);
        InputStream inputStream = new FileInputStream(f);
        IdLexer lexer = new org.example.IdLexer(new InputStreamReader(inputStream));

        Parser p = new Parser();
        p.idLexer = lexer;
        p.setScanner(p.idLexer);
        p.parse();
    }
    HashMap<String, ArrayList<String>> constructors = new HashMap<>();

    public void syntax_error(Symbol cur_token){
        report_error("Error de sintaxis: linea "+ (((IdLexer) this.getScanner()).linea() + 1) +
        ", columna "+ (((IdLexer) this.getScanner()).columna() + 1) + "\n", null);
    }

    public void printFirsts(){
        for (Map.Entry<String, ArrayList<String>> set : constructors.entrySet()) {
            System.out.print(set.getKey() + ": ");
            printSentenceFirsts(constructors.get(set.getKey()));
            System.out.println();
        }
    }

    public void printSentenceFirsts(ArrayList<String> set){
        for(String value : set){
            if(Character.isUpperCase(value.toCharArray()[0])){
                printSentenceFirsts(constructors.get(value));
            }else{
                System.out.print(value + " ");
            }
        }
    }


:}

terminal String DOUBLEPOINTS, FINALMARK;
terminal String CONST, TERMINAL;
terminal String SEPARATOR;

nonterminal lleng, sentencia;
nonterminal String expr_list, expr;


start with lleng;

lleng ::=        {: printFirsts();:}
        |   sentencia lleng  {:; :}
        ;

sentencia ::= CONST:c DOUBLEPOINTS expr_list:e FINALMARK    {: String[] reg = e.split(" "); ArrayList<String> values = new ArrayList<>(); for(String r : reg) {values.add(r); }; constructors.put(c,values);:}
        |   error FINALMARK                               {:;:}
        ;

expr_list ::=   expr:e   {: RESULT=e;:}
        |   expr:e SEPARATOR expr_list:el {:
                                            RESULT=e + " " + el;

        :}
        ;

expr ::=  TERMINAL:t expr     {: RESULT=t; :}
        |   CONST:c expr      {: RESULT=c; :}
        |   CONST:c           {: RESULT=c; :}
        |   TERMINAL:t        {: RESULT=t; :}
        ;
